{"version":3,"sources":["components/Form1.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Form1","props","className","align","name","onChange","handleInputChange","type","placeholder","Table","style","maxWidth","title","firstName","lastName","location","App","state","allEmployees","employees","filteredEmployees","event","target","value","filter","employee","includes","setState","this","map","id","key","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+sDA6FeA,MAzFf,SAAeC,GAcX,OAEI,yBAAKC,UAAU,yBACX,wBAAIA,UAAU,aAAY,kDAC1B,uBAAGA,UAAU,QAAb,KACA,wBAAIA,UAAU,SAEd,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,WAAWC,MAAM,UAE5B,2BAAOD,UAAU,eAEbE,KAAK,YACLC,SAAUJ,EAAMK,kBAChBC,KAAK,OACLC,YAAY,gBAGpB,yBAAKN,UAAU,cAEnB,6BAEA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,WAAWC,MAAM,UAE5B,2BAAOD,UAAU,eAEbE,KAAK,WACLC,SAAUJ,EAAMK,kBAChBC,KAAK,OACLC,YAAY,eAGpB,yBAAKN,UAAU,cAEnB,6BAEA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,WAAWC,MAAM,UAE5B,2BAAOD,UAAU,eAEbE,KAAK,QACLC,SAAUJ,EAAMK,kBAChBC,KAAK,OACLC,YAAY,WAGpB,yBAAKN,UAAU,cAEnB,6BAEA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,WAAWC,MAAM,UAE5B,2BAAOD,UAAU,eAEbE,KAAK,WACLC,SAAUJ,EAAMK,kBAChBC,KAAK,OACLC,YAAY,cAGpB,yBAAKN,UAAU,cAEnB,+BCvDGO,MA9Bf,SAAeR,GAWX,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACX,yBAAKA,UAAU,8BAA8BQ,MAAO,CAAEC,SAAU,MAC5D,yBAAKT,UAAU,+DAA8D,2BAAID,EAAMW,QACvF,yBAAKV,UAAU,4BACX,wBAAIA,UAAU,qCAAoC,2BAAID,EAAMY,UAAV,IAAsBZ,EAAMa,WAC9E,uBAAGZ,UAAU,eAEjB,yBAAKA,UAAU,uDAAsD,2BAAID,EAAMc,aAGvF,yBAAKb,UAAU,e,OCoCZc,E,4MA9CbC,MAAQ,CACNC,aAAcC,EACdC,kBAAmBD,G,EAGrBb,kBAAoB,SAAAe,GAAS,MAEHA,EAAMC,OAAtBlB,EAFmB,EAEnBA,KAAMmB,EAFa,EAEbA,MAEPH,EAAoB,EAAKH,MAAMC,aAAaM,QAAO,SAAAC,GAAQ,OAAIA,EAASrB,GAAMsB,SAASH,MAE9F,EAAKI,SAAS,CACXP,uB,uDAKH,OAEE,6BAEI,kBAAC,EAAD,CACEd,kBAAmBsB,KAAKtB,oBAM3BsB,KAAKX,MAAMG,kBAAkBS,KAAI,SAAAJ,GAAQ,OACxC,kBAAC,EAAD,CACEN,UAAaA,EACbW,GAAIL,EAASK,GACbC,IAAKN,EAASK,GACdlB,MAAOa,EAASb,MAChBC,UAAWY,EAASZ,UACpBC,SAAUW,EAASX,SACnBC,SAAUU,EAASV,mB,GAtCbiB,aCFEC,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ae643e2a.chunk.js","sourcesContent":["import React from \"react\";\n// import Jumbotron from \"jumbotron\"\n// import \"./style.css\";\n\nfunction Form1(props) {\n    // Setting the component's initial state\n\n\n\n\n\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n\n\n\n    //const searchTitle = props.employees.filter(employee => employee.title);\n\n\n    return (\n\n        <div className=\"jumbotron text-center\">\n            <h1 className=\"display-4\"><b>EMPLOYEE DIRECTORY</b></h1>\n            <p className=\"lead\"> </p>\n            <hr className=\"my-4\" />\n\n            <div className=\"row\">\n                <div className=\"col-md-3\"></div>\n                <div className=\"col-md-6\" align=\"center\">\n\n                    <input className=\"form-control\"\n        \n                        name=\"firstName\"\n                        onChange={props.handleInputChange}\n                        type=\"text\"\n                        placeholder=\"First Name\"\n                    />\n                </div>\n                <div className=\"col-md-3\"></div>\n            </div>\n            <br />\n\n            <div className=\"row\">\n                <div className=\"col-md-3\"></div>\n                <div className=\"col-md-6\" align=\"center\">\n\n                    <input className=\"form-control\"\n        \n                        name=\"lastName\"\n                        onChange={props.handleInputChange}\n                        type=\"text\"\n                        placeholder=\"Last Name\"\n                    />\n                </div>\n                <div className=\"col-md-3\"></div>\n            </div>\n            <br />\n\n            <div className=\"row\">\n                <div className=\"col-md-3\"></div>\n                <div className=\"col-md-6\" align=\"center\">\n\n                    <input className=\"form-control\"\n        \n                        name=\"title\"\n                        onChange={props.handleInputChange}\n                        type=\"text\"\n                        placeholder=\"Title\"\n                    />\n                </div>\n                <div className=\"col-md-3\"></div>\n            </div>\n            <br />\n\n            <div className=\"row\">\n                <div className=\"col-md-3\"></div>\n                <div className=\"col-md-6\" align=\"center\">\n\n                    <input className=\"form-control\"\n                        \n                        name=\"location\"\n                        onChange={props.handleInputChange}\n                        type=\"text\"\n                        placeholder=\"Location\"\n                    />\n                </div>\n                <div className=\"col-md-3\"></div>\n            </div>\n            <br />\n        </div>\n    );\n}\n\n\nexport default Form1;","import React from \"react\";\n\nfunction Table(props) {\n\n    // let searchTitle = props.employees.filter(employee => employee.title);\n\n    // let searchFirstName = props.employees.filter(employee => employee.firstName);\n    \n    // let searchLastName = props.employees.filter(employee => employee.lastName);\n    \n    // let searchLocation = props.employees.filter(employee => employee.location);\n\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-3\"></div>\n            <div className=\"col-md-6\">\n                <div className=\"card border-secondary  mb-3\" style={{ maxWidth: 1000 }}>\n                    <div className=\"card-header bg-dark text-white border-secondary text-center\"><b>{props.title}</b></div>\n                    <div className=\"card-body text-secondary\">\n                        <h5 className=\"card-title text-black text-center\"><b>{props.firstName} {props.lastName}</b></h5>\n                        <p className=\"card-text\"></p>\n                    </div>\n                    <div className=\"card-footer border-secondary text-black text-center\"><b>{props.location}</b></div>\n                </div>\n            </div>\n            <div className=\"col-md-3\"></div>\n\n        </div>\n    );\n}\n\nexport default Table;\n","import React, { Component } from \"react\";\n// import React from 'react';\nimport './App.css';\n// import Header from \"./components/Header\";\nimport Form1 from \"./components/Form1\";\nimport Table from \"./components/Table\";\nimport employees from \"./employees.json\";\n\n// import Jumbotron from \"./components/Jumbotron\";\n\n\n\n// function App() {\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    allEmployees: employees,\n    filteredEmployees: employees\n  };\n\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    const { name, value } = event.target;\n\n    const  filteredEmployees = this.state.allEmployees.filter(employee => employee[name].includes(value))\n    // Updating the input's state\n    this.setState({\n       filteredEmployees\n    });\n};\n\n  render() {\n    return (\n\n      <div>\n        {/* {this.state.employees.filter(employee => ( */}\n          <Form1 \n            handleInputChange={this.handleInputChange}\n          \n          \n          />\n\n       \n        {this.state.filteredEmployees.map(employee => (\n          <Table\n            employees = {employees}\n            id={employee.id}\n            key={employee.id}\n            title={employee.title}\n            firstName={employee.firstName}\n            lastName={employee.lastName}\n            location={employee.location}\n          />\n        ))}\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}